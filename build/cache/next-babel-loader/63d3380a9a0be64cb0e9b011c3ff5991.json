{"ast":null,"code":"var __jsx = React.createElement;\n// @flow\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport * as React from 'react';\nimport color from 'color';\nimport { App as ThemedApp } from \"./Theme\";\nimport themeList from \"../libraries/theme\";\nlet offlineInstalled = false;\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: Menlo, Monaco, \"Lucida Console\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", monospace, serif;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst App = ({\n  children,\n  theme\n}) => {\n  const themeName = !themeList[theme || ''] ? 'main' : theme;\n  if (!themeList[themeName].helper) themeList[themeName].helper = color;\n\n  if (process.env.OFFLINE_SUPPORT && process.browser && !offlineInstalled) {\n    const OfflinePlugin = require('offline-plugin/runtime'); // eslint-disable-line global-require\n\n\n    OfflinePlugin.install({\n      onUpdateReady() {\n        OfflinePlugin.applyUpdate();\n      },\n\n      onUpdated() {\n        window.location.reload();\n      }\n\n    });\n    offlineInstalled = true;\n  }\n\n  return __jsx(ThemeProvider, {\n    theme: themeList[themeName]\n  }, __jsx(ThemedApp, null, __jsx(GlobalStyle, null), children));\n};\n\nApp.defaultProps = {\n  theme: 'main'\n};\nexport default App;","map":{"version":3,"sources":["/home/tuancr/Documents/Project/BeeReading/web/components/App.tsx"],"names":["ThemeProvider","createGlobalStyle","React","color","App","ThemedApp","themeList","offlineInstalled","GlobalStyle","children","theme","themeName","helper","process","env","OFFLINE_SUPPORT","browser","OfflinePlugin","require","install","onUpdateReady","applyUpdate","onUpdated","window","location","reload","defaultProps"],"mappings":";AAAA;AACA,SAASA,aAAT,EAAwBC,iBAAxB,QAAiD,mBAAjD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,GAAG,IAAIC,SAAhB;AACA,OAAOC,SAAP;AAEA,IAAIC,gBAAgB,GAAG,KAAvB;AAMA,MAAMC,WAAW,GAAGP,iBAAkB;;;;;;;;CAAtC;;AAUA,MAAMG,GAAoB,GAAG,CAAC;AAAEK,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAyB;AACpD,QAAMC,SAAS,GAAG,CAACL,SAAS,CAACI,KAAK,IAAI,EAAV,CAAV,GAA0B,MAA1B,GAAmCA,KAArD;AACA,MAAI,CAACJ,SAAS,CAACK,SAAD,CAAT,CAAqBC,MAA1B,EAAkCN,SAAS,CAACK,SAAD,CAAT,CAAqBC,MAArB,GAA8BT,KAA9B;;AAElC,MAAIU,OAAO,CAACC,GAAR,CAAYC,eAAZ,IAA+BF,OAAO,CAACG,OAAvC,IAAkD,CAACT,gBAAvD,EAAyE;AACvE,UAAMU,aAAa,GAAGC,OAAO,CAAC,wBAAD,CAA7B,CADuE,CACd;;;AAEzDD,IAAAA,aAAa,CAACE,OAAd,CAAsB;AACpBC,MAAAA,aAAa,GAAG;AACdH,QAAAA,aAAa,CAACI,WAAd;AACD,OAHmB;;AAIpBC,MAAAA,SAAS,GAAG;AACVC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AANmB,KAAtB;AAQAlB,IAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,SACE,MAAC,aAAD;AAAe,IAAA,KAAK,EAAED,SAAS,CAACK,SAAD;AAA/B,KACE,MAAC,SAAD,QACE,MAAC,WAAD,OADF,EAEGF,QAFH,CADF,CADF;AAQD,CA1BD;;AA4BAL,GAAG,CAACsB,YAAJ,GAAmB;AACjBhB,EAAAA,KAAK,EAAE;AADU,CAAnB;AAIA,eAAeN,GAAf","sourcesContent":["// @flow\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport * as React from 'react';\nimport color from 'color';\n\nimport { App as ThemedApp } from './Theme';\nimport themeList from '../libraries/theme';\n\nlet offlineInstalled = false;\n\ninterface Props {\n  theme?: string;\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: Menlo, Monaco, \"Lucida Console\", \"Liberation Mono\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", monospace, serif;\n  }\n  body {\n    margin: 0;\n    padding: 0;\n  }\n`;\n\nconst App: React.FC<Props> = ({ children, theme }) => {\n  const themeName = !themeList[theme || ''] ? 'main' : theme;\n  if (!themeList[themeName].helper) themeList[themeName].helper = color;\n\n  if (process.env.OFFLINE_SUPPORT && process.browser && !offlineInstalled) {\n    const OfflinePlugin = require('offline-plugin/runtime'); // eslint-disable-line global-require\n\n    OfflinePlugin.install({\n      onUpdateReady() {\n        OfflinePlugin.applyUpdate();\n      },\n      onUpdated() {\n        window.location.reload();\n      },\n    });\n    offlineInstalled = true;\n  }\n\n  return (\n    <ThemeProvider theme={themeList[themeName]}>\n      <ThemedApp>\n        <GlobalStyle />\n        {children}\n      </ThemedApp>\n    </ThemeProvider>\n  );\n};\n\nApp.defaultProps = {\n  theme: 'main',\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}